name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: myAgentPool

variables:
  - name: python.version
    value: '3.7.6'
  - name: azureServiceConnectionId
    value: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)
  # Environment name
  - name: environmentName
    value: 'test'
  - name: appName
    value: 'odlUser238458Application-AppService'
  - group: vars

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2509332530'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(public_key)
        sshKeySecureFile: 'id_rsa'
    
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: Get Public Key
      inputs:
        secureFile: id_rsa.pub

    # since in the Udacity Lab the resource group exists and no other can be created, it needs to be imported
    # Should be run just once
#     Import Resource Group - Udacity Lab required
#    - task: TerraformCLI@0
#      displayName: Terraform Import Resource Group
#      inputs:
#        command: 'import'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#        resourceAddress: module.resource_group.azurerm_resource_group.test
#        resourceId: "/subscriptions/ad6befd3-6a77-4714-b24d-181b38cb2753/resourceGroups/Azuredevops"

    # Run Terraform Apply
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo npm install -g newman
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
#    - task: CmdLine@2
#      displayName: Run Regression Tests
#      continueOnError: true
#      inputs:
#        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    # DONE
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman tests'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    # DONE
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    # copy the jmeter tests files to a new folder so to archive that and not also the fakerestapi folder
    - task: CmdLine@2
      displayName: Prepare JMeter tests archive
      continueOnError: true
      inputs:
        script: 'mkdir jmeter-tests && cp ids.csv ./jmeter-tests/ids.csv && cp testsuite.jmx ./jmeter-tests/testsuite.jmx'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    # DONE
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/jmeter-tests'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool: myAgentPool
    environment: $(environmentName)   # ToDo DONE
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: '$(appName)'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            displayName: Run JMeter Tests
            inputs:
              script: |
                sudo apt-get install openjdk-11-jre-headless -y
                java -version
                wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz"
                tar -xf apache-jmeter-5.4.tgz
                unzip -o $(Build.BuildId)-perftests.zip
                ./apache-jmeter-5.4/bin/jmeter -n -t testsuite.jmx -l results.csv -e -f -o report -j test.log
                cat test.log
              workingDirectory: $(Pipeline.Workspace)/drop-perftests

          - task: ArchiveFiles@2
            displayName: Save JMeter Test Report to Artifact
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/drop-perftests/report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/report-$(Build.BuildId).zip'
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/report-$(Build.BuildId).zip'
              artifactName: 'drop-jmeter-report'
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: $(environmentName)
      resourceType: VirtualMachine
      resourceName: odlUser238458Application-vm
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
            name: "download_ui_tests"

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                sudo apt-get upgrade -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                sudo apt-get -y install zip
                cd ~/
                DIR=/home/azuredevops/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/azureDevOps/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip ~/app
                cd ~/app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/azuredevops/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    #LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    LATEST='112.0.5615.49'
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                    mkdir logs
                fi
                export PATH=$PATH:/home/azuredevops/app
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."
                cat selenium.log
                cp selenium.log ./logs/selenium$(Build.BuildId).log

                #Install Log Analytics agent on Linux computers (only need to run once)
#                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
#                sh onboard_agent.sh -w ${LOG_ANALYTICS_WORKSPACE_ID} -s ${LOG_ANALYTICS_PRIMARY_KEY}
#                sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}

            env: # To use secret variables in a script, we must explicitly map them as environment variables.
              LOG_ANALYTICS_WORKSPACE_ID: $(LOG_ANALYTICS_WORKSPACE_ID)
              LOG_ANALYTICS_PRIMARY_KEY: $(LOG_ANALYTICS_PRIMARY_KEY)
#          - task: ArchiveFiles@2
#            displayName: 'Archive Selenium'
#            inputs:
#              rootFolderOrFile: '~/app/selenium.log'
#              includeRootFolder: false
#              archiveType: 'zip'
#              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-log.zip'
#          - task: PublishPipelineArtifact@1
#            displayName: Publish Selenium logs
#            inputs:
#              targetPath: '$(System.DefaultWorkingDirectory)'
#              artifactName: 'drop-selenium-log'
